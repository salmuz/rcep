KaplanMeier(subset(tongue, tongue$type == 1))
myKM(tongue, pDelta=1)
myKM <- function(obs, pDelta){#
	death.unique <- sort(unique(obs[delta==pDelta,]))#
	n <- length(death.unique)#
	S<- var.S <- req(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- req(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d/r)*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:.]/r[1:.]*(r[1:.]-d[1:.]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
myKM(tongue, pDelta=1)
obs<- tongue
unique(obs[delta==pDelta,])
unique(obs[delta==1,])
unique(obs[delta=1,])
unique(obs[delta==1,])
unique(obs[,delta==1])
unique(obs[,,delta==1])
unique(obs[delta==1])
unique(obs[deltas==1,])
unique(obs[delta==1,])
delta
rm(ls())
rm(list=ls())
delta
unique(obs[delta==1,])
obs <- tongue
data(tongue)
obs <- tongue
unique(obs[delta==1,])
obs[delta==1,]
tongue[delta==1,]
tongue[delta==1]
myKM <- function(obs, pDelta){#
	death.unique <- sort(unique(subset(obs, obs$delta==pDelta))#
	n <- length(death.unique)#
	S<- var.S <- req(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- req(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d/r)*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:.]/r[1:.]*(r[1:.]-d[1:.]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
myKM <- function(obs, pDelta){#
	death.unique <- sort(unique(subset(obs, obs$delta==pDelta)))#
	n <- length(death.unique)#
	S<- var.S <- req(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- req(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d/r)*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:.]/r[1:.]*(r[1:.]-d[1:.]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
myKM(tongue, pDelta=1)
subset(obs, obs$delta==1)
unique(subset(obs, obs$delta==1))
myKM(subset(tongue, tongue$type == 1), pDelta=1)
obs <- subset(tongue, tongue$type == 1)
unique(subset(obs, obs$delta==1))
subset(obs, obs$delta==1)
myKM <- function(obs, pDelta){#
	death.unique <- sort(unique(subset(obs, obs$delta==pDelta)))#
	n <- length(death.unique)#
	S<- var.S <- req(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- req(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d/r)*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:.]/r[1:.]*(r[1:.]-d[1:.]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
myKM(subset(tongue, tongue$type == 1), pDelta=1)
sort(unique(subset(obs, obs$delta==pDelta)))
unique(subset(obs, obs$delta==pDelta))
unique(subset(obs, obs$delta==1))
sort(unique(subset(obs, obs$delta==1)))
sort
?sort
data <- unique(subset(obs, obs$delta==pDelta))#
	death.unique <- data[order(data$time),]
data <- unique(subset(obs, obs$delta==pDelta))
data <- unique(subset(obs, obs$delta==1))
death.unique <- data[order(data$time),]
death.unique
myKM <- function(obs, pDelta){#
	data <- unique(subset(obs, obs$delta==pDelta))#
	death.unique <- data[order(data$time),]#
	n <- length(death.unique)#
	S<- var.S <- req(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- req(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d/r)*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:.]/r[1:.]*(r[1:.]-d[1:.]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
myKM(subset(tongue, tongue$type == 1), pDelta=1)
myKM <- function(obs, pDelta){#
	data <- unique(subset(obs, obs$delta==pDelta))#
	death.unique <- data[order(data$time),]#
	n <- length(death.unique)#
	S<- var.S <- rep(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d/r)*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:.]/r[1:.]*(r[1:.]-d[1:.]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
myKM(subset(tongue, tongue$type == 1), pDelta=1)
myKM <- function(obs, pDelta){#
	data <- unique(subset(obs, obs$delta==pDelta))#
	death.unique <- data[order(data$time),]#
	n <- length(death.unique)#
	S<- var.S <- rep(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs$time>=t)#
		d[i] <- sum(obs$time==t & delta==1)#
		S[i+1] <- (1-d/r)*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:.]/r[1:.]*(r[1:.]-d[1:.]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
myKM(subset(tongue, tongue$type == 1), pDelta=1)
KaplanMeier(subset(tongue, tongue$type == 2))
data$delta
data <- subset(tongue, tongue$type == 1)
obs <- data$time
delta <- data$delta
obs[delta=1]
obs[delta==1]
myKM <- function(obs, delta){#
	death.unique <- sort(unique(obs[delta==1]))#
	n <- length(death.unique)#
	S<- var.S <- rep(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d/r)*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:.]/r[1:.]*(r[1:.]-d[1:.]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
data <- subset(tongue, tongue$type == 1)#
myKM(data$time, data$delta)
myKM <- function(obs, delta){#
	death.unique <- sort(unique(obs[delta==1]))#
	n <- length(death.unique)#
	S<- var.S <- rep(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d[i]/r[i])*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:.]/r[1:.]*(r[1:.]-d[1:.]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
data <- subset(tongue, tongue$type == 1)#
myKM(data$time, data$delta)
myKM <- function(obs, delta){#
	death.unique <- sort(unique(obs[delta==1]))#
	n <- length(death.unique)#
	S<- var.S <- rep(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d[i]/r[i])*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:]/r[1:]*(r[1:]-d[1:]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}#
#
# test du validation du kaplanMeier #
data <- data.frame(c(1,3,4,5,7,8,9,10,11,13),c(1,1,0,1,0,1,1,0,1,0))#
colnames(data) <- c('time', 'delta')#
KaplanMeier(data, n=8) # n n'accepte que valeur entiers, i.e. 8,5 = 8#
#
# Calculs avec les donnÃ©es tongue de type 1 #
KaplanMeier(subset(tongue, tongue$type == 1))#
KaplanMeier(subset(tongue, tongue$type == 2))#
#
data <- subset(tongue, tongue$type == 1)#
myKM(data$time, data$delta)
myKM <- function(obs, delta){#
	death.unique <- sort(unique(obs[delta==1]))#
	n <- length(death.unique)#
	S<- var.S <- rep(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d[i]/r[i])*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:]/r[1:]*(r[1:]-d[1:]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
data <- subset(tongue, tongue$type == 1)#
myKM(data$time, data$delta)
myKM <- function(obs, delta){#
	death.unique <- sort(unique(obs[delta==1]))#
	n <- length(death.unique)#
	S<- varS <- rep(1,n+1)#
	varS[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d[i]/r[i])*S[i]#
		varS[i+1] <- S[i+1]^2*sum(d[1:]/r[1:]*(r[1:]-d[1:]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=varS))#
}
data <- subset(tongue, tongue$type == 1)#
myKM(data$time, data$delta)
myKM <- function(obs, delta){#
	death.unique <- sort(unique(obs[delta==1]))#
	n <- length(death.unique)#
	S<- varS <- rep(1,n+1)#
	varS[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d[i]/r[i])*S[i]#
		varS[i+1] <- S[i+1]^2*sum(d[1:]/r[1:]*(r[1:]-d[1:]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=varS))#
}
var.S <- rep(1,n+1)
var.S <- rep(1,10+1)
var.S
myKM <- function(obs, delta){#
	death.unique <- sort(unique(obs[delta==1]))#
	n <- length(death.unique)#
	S<- var.S <- rep(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d[i]/r[i])*S[i]#
		varS[i+1] <- S[i+1]^2*sum(d[1:]/r[1:]*(r[1:]-d[1:]))#
	}#
#	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
myKM <- function(obs, delta){#
	death.unique <- sort(unique(obs[delta==1]))#
	n <- length(death.unique)#
	S<- var.S <- rep(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d[i]/r[i])*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:]/r[1:]*(r[1:]-d[1:]))#
	}#
#	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
d = rep(1, 3)
d
d[1:]
d[1:.]
d[1]
d[1:.]
d[1:]
d[1:.]
d[1::]
d[1:,#
]
d[1:,]
d[1,]
d[]
d[1,]
d[1:]
d[1:,]
d[1:.]
d[1:]
d[:]
d[]
d<-matrix(1, 3, 3)
d
d[1:]
d[1:.]
d[1:,]
d[1,]
d = rep(1, 3)
d[1,]
d[,]
d[,1]
d[1,]
myKM <- function(obs, delta){#
	death.unique <- sort(unique(obs[delta==1]))#
	n <- length(death.unique)#
	S<- var.S <- rep(1,n+1)#
	var.S[1] <- 0;#
	r <- d <- rep(NA, n)#
	for(i in 1:n){#
		t <- death.unique[i];#
		r[i] <- sum(obs>=t)#
		d[i] <- sum(obs==t & delta==1)#
		S[i+1] <- (1-d[i]/r[i])*S[i]#
		var.S[i+1] <- S[i+1]^2*sum(d[1:i]/r[1:i]*(r[1:i]-d[1:i]))#
	}#
	return(cbind(c(0,death.unique), S=S, var=var.S))#
}
data <- subset(tongue, tongue$type == 1)#
myKM(data$time, data$delta)
library("survival")
? survfit
data(tongue)
data <- subset(tongue, tongue$type == 1)#
#data <- data[!duplicated(data),]#
#rownames(data) <- 1:nrow(data)#
surv <- Surv(data$time, data$delta)#
fit  <- survfit(surv ~ 1, conf.int=0.95, conf.type=plain)#
summary(fit)
data <- subset(tongue, tongue$type == 1)
library("KMsurv")
data <- subset(tongue, tongue$type == 1)#
#data <- data[!duplicated(data),]#
#rownames(data) <- 1:nrow(data)#
surv <- Surv(data$time, data$delta)#
fit  <- survfit(surv ~ 1, conf.int=0.95, conf.type=plain)#
summary(fit)
data(tongue)
data <- subset(tongue, tongue$type == 1)#
#data <- data[!duplicated(data),]#
#rownames(data) <- 1:nrow(data)#
surv <- Surv(data$time, data$delta)#
fit  <- survfit(surv ~ 1, conf.int=0.95, conf.type=plain)#
summary(fit)
fit  <- survfit(surv ~ 1, conf.int=0.95, conf.type= plain)
fit  <- survfit(surv ~ 1, conf.int=0.95, conf.type=plain)
?survfit
fit  <- survfit(surv ~ 1, conf.int=0.95, conf.type="plain")
summary(fit)
# Methode gÃ©nÃ¨ral avec doublon et nombre de decÃ¨s #
KaplanMeier <- function(sample, ic=0.95,  n=-99){#
  # Il faut trier les donnÃ©es par time #
  data <- sample[order(sample$time),]#
  rownames(data) <- 1:nrow(data)#
  St <- 1#
  nRisk <- nrow(data) #
  # Si n = -99, donc on calcule l'estimation pour tous les donnÃ©es #
  limit <- which(data$time==n)#
  limit <- if(length(limit) == 0) nrow(data) else limit;#
  variance <- 0#
  i <- 1#
  while(i <= limit){#
  	if(data$delta[i] == 1){#
  		obs <- data$time[i] #
  		nDeces <- length(which(data$time == obs & data$delta == 1))#
	  	St <- St*(1-(nDeces/nRisk)) # Estimateur de KaplanMeier #
	  	cat(St, nDeces, nRisk ,data$time[i], "\n")#
	  	variance <- variance + (nDeces/((nRisk - 1)*nRisk))#
	  	nRisk <- nRisk - nDeces;#
	  	i <- i + nDeces#
  	}else{#
  		nRisk <- nRisk - 1;#
  		i <- i + 1;#
  	}  	#
  }#
  variance <- (St^2)*variance;#
  # pour calculer P(Z<x) = 1 - alpha/2, ou alpha = 1 - ic, ic:interval confiance#
  Z <- qnorm(1-((1-ic)/2))#
  IC <- c(St-Z*sqrt(variance),St+Z*sqrt(variance))#
  # Affiche les calculs #
  cat("Results obtenus","\n")#
  cat(paste("St(", limit, ") = ",St, sep = ""), "\n")#
  cat(paste("Ecart(St(", limit,")) = ",sqrt(variance), sep = ""), "\n")#
  cat(paste("Intervale de confinace : [",IC[1], ",", IC[2], "]", sep = ""), "\n")  #
}
KaplanMeier(subset(tongue, tongue$type == 1))
KaplanMeier <- function(sample, ic=0.95,  n=-99){#
  # Il faut trier les donnÃ©es par time #
  data <- sample[order(sample$time),]#
  rownames(data) <- 1:nrow(data)#
  St <- 1#
  nRisk <- nrow(data) #
  # Si n = -99, donc on calcule l'estimation pour tous les donnÃ©es #
  limit <- which(data$time==n)#
  limit <- if(length(limit) == 0) nrow(data) else limit;#
  variance <- 0#
  i <- 1#
  while(i <= limit){#
  	if(data$delta[i] == 1){#
  		obs <- data$time[i] #
  		nDeces <- length(which(data$time == obs & data$delta == 1))#
	  	St <- St*(1-(nDeces/nRisk)) # Estimateur de KaplanMeier #
	  	variance <- variance + (nDeces/((nRisk - 1)*nRisk))#
	  	nRisk <- nRisk - nDeces;#
	  	i <- i + nDeces#
  	}else{#
  		nRisk <- nRisk - 1;#
  		i <- i + 1;#
  	}  	#
  }#
  variance <- (St^2)*variance;#
  # pour calculer P(Z<x) = 1 - alpha/2, ou alpha = 1 - ic, ic:interval confiance#
  Z <- qnorm(1-((1-ic)/2))#
  IC <- c(St-Z*sqrt(variance),St+Z*sqrt(variance))#
  # Affiche les calculs #
  cat("Results obtenus","\n")#
  cat(paste("St(", limit, ") = ",St, sep = ""), "\n")#
  cat(paste("Ecart(St(", limit,")) = ",sqrt(variance), sep = ""), "\n")#
  cat(paste("Intervale de confinace : [",IC[1], ",", IC[2], "]", sep = ""), "\n")  #
}
KaplanMeier(subset(tongue, tongue$type == 1))
summary(fit)
runif(1)
runif(99)
require(Hmisc)
require(rms)
library(rms)
install.library(rms)
install.packages('rms')
library(rms)
require(rms)
data(mcar)
require(lme)
require(nlme)
install.packages('nlme')
require(nlme)
read.table("Download/data.txt", hearder=T)
read.table("Download/data.txt", header=T)
read.table("Downloads/data.txt", header=T)
sample read.table("Downloads/data.txt", header=T)
sample <- read.table("Downloads/data.txt", header=T)
attach(sample)
sample
Age
m1.nlme<-lme(log(Time)â¼Club+log(Age), random=â¼1|Athlete)
m1.nlme<-lme(log(Time)~ Club+log(Age), random=â¼1|Athlete)
m1.nlme<-lme(log(Time) ~ Club+log(Age), random=~1|Athlete)
summary(m1.nlme)
m2.nlme<-lme(log(time)â¼log(age), random=â¼1|athlete)
m2.nlme<-lme(log(time)~log(age), random=~1|athlete)
sample <- read.table("Downloads/data.txt", header=T)
sample
attach(sample)
ls
cls
m2.nlme<-lme(log(time)~log(age), random=~1|athlete)
summarize(m2.nlme)
summary(> m2.nlme)
summary(m2.nlme)
m1.nlme<-lme(log(time)~club+log(age), random=~1|athlete)
summary(m1.nlme)
m3.nlme<-lme(log(time)~log(age), random=~1+log(age)|athlete)
.lme
?lme
m3.nlme<-lme(log(time)~log(age), random=~1+log(age)|athlete, maxIter=100)
m3.nlme<-lme(log(time)~log(age), random=~1+log(age)|athlete, control.maxIter=100)
control <- lmeControl(maxIter = 100)
m3.nlme<-lme(log(time)~log(age), random=~1+log(age)|athlete, control=control)
m3.nlme<-lme(log(time) ~ log(age), random =~ 1+log(age)|athlete, control=control)
m3.nlme<-lme(log(time) ~ log(age), random =~ 1|athlete, control=control)
m3.nlme<-lme(log(time) ~ log(age), random =~ 1+log(age)|athlete, control=control)
m3.nlme<-lme(log(time) ~ log(age), random =~ 1+age|athlete, control=control)
sumary(m3.nlme)
summary(m3.nlme)
m3.nlme<-lme(log(time) ~ log(age), random =~ 1+age|athlete, control=control)
m3.nlme<-lme(log(time) ~ Club, random =~ 1+log(age)|athlete, control=control)
m3.nlme<-lme(log(time) ~ Club, random =~ 1+ log(age) | athlete, control=control)
ctrl <- lmeControl(opt='optim');
m3.nlme<-lme(log(time) ~ log(age), random =~ 1+log(age)|athlete, control=ctrl)
summary(m3.nlme)
?nlme
# Question 11#
library("survival")#
library("KMsurv")
# (a)#
# Load data #
data(tongue)
data <- subset(tongue, tongue$type == 1)#
#data <- data[!duplicated(data),]#
#rownames(data) <- 1:nrow(data)#
surv <- Surv(data$time, data$delta)#
fit  <- survfit(surv ~ 1, conf.int=0.95, conf.type="plain")#
summary(fit)
?survdiff
library(rms)
?survdiff
x <- matrix(1:1, ncol = 2)
x
x <- matrix(1:1, ncol = 2, nrow=2)
x
x <- matrix(0, ncol = 2, nrow=2)
x
diag(x = 1, nrow, ncol)
diag(x = 1, nrow=4, ncol=4)
x = diag(x = 1, nrow=4, ncol=4)
x <- diag(x = 1, nrow=4, ncol=4)
det(x)
x <- diag(x = 3, nrow=4, ncol=4)
det(x)
solve(x)
ls
ls()
rm(list=ls())
ls()
setwd("/Users/salmuz/Dropbox/Montpellier_II/Master_Statistique/MasterM1_BioStatistique/Semestre02/TER/source")#
#
## Charger l'Ã©chantillon#
Xbrut.app <- matrix(scan("nirc.asc"), ncol=700, byrow=T)#
Ybrut.app <- matrix(scan("labc.asc"), ncol=4, byrow=T)#
Xbrut.val <- matrix(scan("nirp.asc"), ncol=700, byrow=T)#
Ybrut.val <- matrix(scan("labp.asc"), ncol=4, byrow=T)#
#
# ? Centre et reduite les donnÃ©es? #
#
#ModÃ¨le UnivariÃ©  #
Y.unit <- 2#
#
## Echantillon pour trouver les estimateurs du modÃ¨le#
cookie.app <- cbind.data.frame(Ybrut.app[,Y.unit], Xbrut.app)#
names(cookie.app) <- c("sucres", paste("X", 1:ncol(Xbrut.app), sep=""))#
#
## Echantillon pour validar el modÃ¨le #
cookie.val <- cbind.data.frame(Ybrut.val[,Y.unit], Xbrut.val)#
names(cookie.val) <- c("sucres", paste("X", 1:ncol(Xbrut.val), sep=""))#
#
## Regression avec Ridge #
library(pls)#
library(MASS)#
# Graine du gÃ©nÃ©rateur fixÃ©e #
set.seed(87)#
## Creation des segments alÃ©atoires pour la validation croisÃ©e#
cvseg <- cvsegments(nrow(cookie.app), k=4, type="random")
reg.regularization <- function(X, Y, s=0.5, ...){#
	X <- as.matrix(X)#
	p <- ncol(X) # explicative#
	n <- nrow(X) # n sample#
    # centre et reduite les donnees #
    Xm <- colMeans(X)#
    Ym <- mean(Y)#
    X <- X - rep(Xm, rep(n, p)) # centree#
    Xsd <- drop(rep(1/n, n) %*% X^2)^0.5#
    X <- X/rep(Xsd2, rep(n, p)) # reduite#
    Y <- Y -Ym#
    # end: centre et reduite les donnees#
	Niter <- 100#
	u <- matrix(10^-20, ncol=Niter, nrow= p)#
	W <- diag(x = 1/n, n, n)#
	N <- t(X) %*% W %*% X#
	# compute parameters gamma and sigma#
	compute_paremeters <- function(k = 1){#
		Xu <- X %*% u[,k-1]#
		uX <- t(Xu)#
		uXY <- uX %*% Y#
		Xu.norm <- norm(Xu, "2")^2#
		uNu <- u[,k-1] %*% N %*% u[,k-1]#
		gamma <- as.numeric(uXY / Xu.norm)#
		sigma <- (norm(Y-gamma*Xu)^2) / n#
		lambda <- as.numeric((gamma*(1-s)*(uXY - Xu.norm) / 2*sigma)  + s*uNu)#
		return(list(lambda=lambda, sigma=sigma, gamma=gamma));#
	}#
	# compute the u vector with parameters#
	compute_u_normed <- function(k, lambda, sigma, gamma){#
		Sigma <- ((s-1)*gamma^2*t(X) %*% X + 2*sigma*(s*N - lambda))#
		u[,k] <- gamma*(s-1)*(chol2inv(Sigma) %*% t(X) %*% Y )#
		u[,k] <- u[,k]/norm(u[,k], "2")#
		return(u[,k])#
	}#
	u[,1] <- u[,1]/norm(u[,1], "2")#
	params <- compute_paremeters(2)#
	u[,2] <- compute_u_normed(2, params$lambda, params$sigma, params$gamma)#
	i <- 2#
	while((t(u[,i-1])%*%u[,i])^2 <= 1*10^-1 && i < Niter){#
		i <- i+1#
		params <- compute_paremeters(i)#
		u[,i] <- compute_u_normed(i, params$lambda, params$sigma, params$gamma)#
	}#
	params <- compute_paremeters(i+1)#
	return(list(u = u[,i], gamma = params$gamma, sigma=params$sigma, Xm=Xm, Ym=Ym, Xsd=Xsd));#
}
reg.cv.smax <- function(s.max=1, cvseg, nbe=10, ...){#
	press <- rep(0, nbe)#
	set_s <- seq(0, s.max, length=nbe)#
	set_s <- set_s[c(-1,-length(set_s))]#
	for(i in 1:length(cvseg)){#
		valid <- cookie.app[unlist(cvseg[i]),]#
		coeff <- sigma <- intercept <- Xm <- Xsd <- NULL#
		for(j in 1:length(set_s)){#
			resp <- reg.regularization(cookie.app[unlist(cvseg[-i]),-1], cookie.app[unlist(cvseg[-i]),1], set_s[j])#
			coeff <- rbind(resp$gamma*resp$u, coeff)#
			sigma <- rbind(resp$sigma, sigma)#
		}#
		intercept <- rbind(resp$Ym, intercept)#
		Xm <- rbind(resp$Xm, Xm)#
		Xsd <- rbind(resp$Xsd, Xsd)#
		Xs <- (valid[,-1] - rep(Xm, rep(length(valid),700)))/Xsd#
		prediction <- coeff %*% t(data.matrix(Xs)) + matrix(intercept, nrow(coeff), nrow(valid));#
		press <- press + colSums((matrix(valid[,1], nrow(coeff), nrow(valid), byrow=T)-prediction)^2)#
	}#
	s_hat <- set_s[which.min(press)]#
	return(list(s_hat=s_hat, press=press))#
}
## initialisation d'estimateur par defaut #
resp <- reg.cv.smax(1, cvseg, nbe=1000)
reg.regularization <- function(X, Y, s=0.5, ...){#
	X <- as.matrix(X)#
	p <- ncol(X) # explicative#
	n <- nrow(X) # n sample#
    # centre et reduite les donnees #
    Xm <- colMeans(X)#
    Ym <- mean(Y)#
    X <- X - rep(Xm, rep(n, p)) # centree#
    Xsd <- drop(rep(1/n, n) %*% X^2)^0.5#
    X <- X/rep(Xsd, rep(n, p)) # reduite#
    Y <- Y -Ym#
    # end: centre et reduite les donnees#
	Niter <- 100#
	u <- matrix(10^-20, ncol=Niter, nrow= p)#
	W <- diag(x = 1/n, n, n)#
	N <- t(X) %*% W %*% X#
	# compute parameters gamma and sigma#
	compute_paremeters <- function(k = 1){#
		Xu <- X %*% u[,k-1]#
		uX <- t(Xu)#
		uXY <- uX %*% Y#
		Xu.norm <- norm(Xu, "2")^2#
		uNu <- u[,k-1] %*% N %*% u[,k-1]#
		gamma <- as.numeric(uXY / Xu.norm)#
		sigma <- (norm(Y-gamma*Xu)^2) / n#
		lambda <- as.numeric((gamma*(1-s)*(uXY - Xu.norm) / 2*sigma)  + s*uNu)#
		return(list(lambda=lambda, sigma=sigma, gamma=gamma));#
	}#
	# compute the u vector with parameters#
	compute_u_normed <- function(k, lambda, sigma, gamma){#
		Sigma <- ((s-1)*gamma^2*t(X) %*% X + 2*sigma*(s*N - lambda))#
		u[,k] <- gamma*(s-1)*(chol2inv(Sigma) %*% t(X) %*% Y )#
		u[,k] <- u[,k]/norm(u[,k], "2")#
		return(u[,k])#
	}#
	u[,1] <- u[,1]/norm(u[,1], "2")#
	params <- compute_paremeters(2)#
	u[,2] <- compute_u_normed(2, params$lambda, params$sigma, params$gamma)#
	i <- 2#
	while((t(u[,i-1])%*%u[,i])^2 <= 1*10^-1 && i < Niter){#
		i <- i+1#
		params <- compute_paremeters(i)#
		u[,i] <- compute_u_normed(i, params$lambda, params$sigma, params$gamma)#
	}#
	params <- compute_paremeters(i+1)#
	return(list(u = u[,i], gamma = params$gamma, sigma=params$sigma, Xm=Xm, Ym=Ym, Xsd=Xsd));#
}#
reg.cv.smax <- function(s.max=1, cvseg, nbe=10, ...){#
	press <- rep(0, nbe)#
	set_s <- seq(0, s.max, length=nbe)#
	set_s <- set_s[c(-1,-length(set_s))]#
	for(i in 1:length(cvseg)){#
		valid <- cookie.app[unlist(cvseg[i]),]#
		coeff <- sigma <- intercept <- Xm <- Xsd <- NULL#
		for(j in 1:length(set_s)){#
			resp <- reg.regularization(cookie.app[unlist(cvseg[-i]),-1], cookie.app[unlist(cvseg[-i]),1], set_s[j])#
			coeff <- rbind(resp$gamma*resp$u, coeff)#
			sigma <- rbind(resp$sigma, sigma)#
		}#
		intercept <- rbind(resp$Ym, intercept)#
		Xm <- rbind(resp$Xm, Xm)#
		Xsd <- rbind(resp$Xsd, Xsd)#
		Xs <- (valid[,-1] - rep(Xm, rep(length(valid),700)))/Xsd#
		prediction <- coeff %*% t(data.matrix(Xs)) + matrix(intercept, nrow(coeff), nrow(valid));#
		press <- press + colSums((matrix(valid[,1], nrow(coeff), nrow(valid), byrow=T)-prediction)^2)#
	}#
	s_hat <- set_s[which.min(press)]#
	return(list(s_hat=s_hat, press=press))#
}
resp <- reg.cv.smax(1, cvseg, nbe=100)
resp
plot(seq(0,1,length=100), resp$press)
choix.kappa <- function (kappamax=1, cvseg, nbe=1000){#
	press <- rep(0, nbe)#
	for(i in 1:length(cvseg)){#
		valid <- cookie.app[unlist(cvseg[i]),]#
		modele <- lm.ridge(sucres~., data=cookie.app[unlist(cvseg[-i]),], lambda=seq(0, kappamax, length=nbe))#
		coeff <- coef(modele)#
		prediction <- matrix(coeff[,1], nrow(coeff), nrow(valid)) + coeff[,-1]%*%t(data.matrix(valid[,-1]))#
		press <- press + rowSums((matrix(valid[,1], nrow(coeff), nrow(valid), byrow=T)-prediction)^2)#
	}#
	kappaet <- seq(0, kappamax, length=nbe)[which.min(press)]#
	return(list(kappaet=kappaet, press=press))#
}#
nbe <- 10#
res <- choix.kappa(1, cvseg, nbe)#
kappaet <- res$kappaet#
plot(seq(0,1,length=nbe), res$press)
choix.kappa <- function (kappamax=1, cvseg, nbe=1000){#
	press <- rep(0, nbe)#
	for(i in 1:length(cvseg)){#
		valid <- cookie.app[unlist(cvseg[i]),]#
		modele <- lm.ridge(sucres~., data=cookie.app[unlist(cvseg[-i]),], lambda=seq(0, kappamax, length=nbe))#
		coeff <- coef(modele)#
		prediction <- matrix(coeff[,1], nrow(coeff), nrow(valid)) + coeff[,-1]%*%t(data.matrix(valid[,-1]))#
		press <- press + rowSums((matrix(valid[,1], nrow(coeff), nrow(valid), byrow=T)-prediction)^2)#
	}#
	kappaet <- seq(0, kappamax, length=nbe)[which.min(press)]#
	return(list(kappaet=kappaet, press=press))#
}#
nbe <- 100#
res <- choix.kappa(1, cvseg, nbe)#
kappaet <- res$kappaet#
plot(seq(0,1,length=nbe), res$press)
plot(seq(0,1,length=100), resp$press)
sets <- seq(0, 1, length=30)#
sets <- sets[c(-1,-length(sets))]#
for(j in 1:length(sets)){#
	system.time(resp <- reg.regularization(cookie.app[,-1], cookie.app[,1], sets[j]))#
	cat(paste("resp[", j, "] : ( gamma=", resp$gamma,", sigma=", resp$sigma, ")", sep = ""), "\n")#
}
reg.regularization <- function(X, Y, s=0.5, ...){#
	X <- as.matrix(X)#
	p <- ncol(X) # explicative#
	n <- nrow(X) # n sample#
    # centre et reduite les donnees #
    Xm <- colMeans(X)#
    Ym <- mean(Y)#
    X <- X - rep(Xm, rep(n, p)) # centree#
    Xsd <- drop(rep(1/n, n) %*% X^2)^0.5#
    X <- X/rep(Xsd, rep(n, p)) # reduite#
    Y <- Y -Ym#
    # end: centre et reduite les donnees#
	Niter <- 100#
	u <- matrix(10^-20, ncol=Niter, nrow= p)#
	W <- diag(x = 1/n, n, n)#
	N <- t(X) %*% W %*% X#
	# compute parameters gamma and sigma#
	compute_paremeters <- function(k = 1){#
		Xu <- X %*% u[,k-1]#
		uX <- t(Xu)#
		uXY <- uX %*% Y#
		Xu.norm <- norm(Xu, "2")^2#
		uNu <- u[,k-1] %*% N %*% u[,k-1]#
		gamma <- as.numeric(uXY / Xu.norm)#
		sigma <- (norm(Y-gamma*Xu)^2) / n#
		lambda <- as.numeric((gamma*(1-s)*(uXY - Xu.norm) / 2*sigma)  + s*uNu)#
		return(list(lambda=lambda, sigma=sigma, gamma=gamma));#
	}#
	# compute the u vector with parameters#
	compute_u_normed <- function(k, lambda, sigma, gamma){#
		Sigma <- ((s-1)*gamma^2*t(X) %*% X + 2*sigma*(s*N - lambda))#
		u[,k] <- gamma*(s-1)*(solve(Sigma) %*% t(X) %*% Y )#
		u[,k] <- u[,k]/norm(u[,k], "2")#
		return(u[,k])#
	}#
	u[,1] <- u[,1]/norm(u[,1], "2")#
	params <- compute_paremeters(2)#
	u[,2] <- compute_u_normed(2, params$lambda, params$sigma, params$gamma)#
	i <- 2#
	while((t(u[,i-1])%*%u[,i])^2 <= 1*10^-1 && i < Niter){#
		i <- i+1#
		params <- compute_paremeters(i)#
		u[,i] <- compute_u_normed(i, params$lambda, params$sigma, params$gamma)#
	}#
	params <- compute_paremeters(i+1)#
	return(list(u = u[,i], gamma = params$gamma, sigma=params$sigma, Xm=Xm, Ym=Ym, Xsd=Xsd));#
}
sets <- seq(0, 1, length=30)#
sets <- sets[c(-1,-length(sets))]#
for(j in 1:length(sets)){#
	system.time(resp <- reg.regularization(cookie.app[,-1], cookie.app[,1], sets[j]))#
	cat(paste("resp[", j, "] : ( gamma=", resp$gamma,", sigma=", resp$sigma, ")", sep = ""), "\n")#
}
?svd
## initialisation d'estimateur par defaut #
resp <- reg.cv.smax(1, cvseg, nbe=100)
?chol2inv
s=0
X <- cookie.app[,-1]
Y <- cookie.app[,1]
plot(seq(0,1,length=100), resp$press)
X <- as.matrix(X)
p <- ncol(X) # explicative
n <- nrow(X) # n sample
# centre et reduite les donnees
Xm <- colMeans(X)
Ym <- mean(Y)
X <- X - rep(Xm, rep(n, p)) # centree
Xsd <- drop(rep(1/n, n) %*% X^2)^0.5
X <- X/rep(Xsd, rep(n, p)) # reduite
Y <- Y -Ym
Niter <- 100
u <- matrix(10^-20, ncol=Niter, nrow= p)
W <- diag(x = 1/n, n, n)
N <- t(X) %*% W %*% X
# compute parameters gamma and sigma
compute_paremeters <- function(k = 1){
)
